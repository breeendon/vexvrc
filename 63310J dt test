#include "main.h"
#include "lemlib/api.hpp"




	

// controller
pros::Controller controller(pros::E_CONTROLLER_MASTER);

// drive motors
pros::Motor lF();
pros::Motor lBb();
pros::Motor lBt();
pros::Motor rF(); 
pros::Motor rMb();
pros::Motor rBt(); 





pros::MotorGroup left({lF, lM, lB});
pros::MotorGroup right({rF, lM, rB});



lemlib::Drivetrain_t drivetrain(
	&left, //leftside motorgroup
	&right, //right side motorgroup
	13.25, //wheel track
  4, //wheel diameters
	257, //drivetrain rpm
	2 //chase power
);


// forward/backward PID
lemlib::ChassisController_t lateralController {
    8, // kP
    30, // kD
    1, // smallErrorRange
    100, // smallErrorTimeout
    3, // largeErrorRange
    500, // largeErrorTimeout
    5 // slew rate
};

// turning PID
lemlib::ChassisController_t angularController {
    4, // kP
    40, // kD
    1, // smallErrorRange
    100, // smallErrorTimeout
    3, // largeErrorRange
    500, // largeErrorTimeout
    40 // slew rate
};

lemlib::OdomSensors_t sensors(
	nullptr,
	nullptr,
	nullptr,
	nullptr,
	nullptr //IMU
);

lemlib::Chassis chassis(drivetrain, linear, angular, sensors);

/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {

}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/*
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {	
	
   chassis.moveTo(0,-90,1000,50);
}
/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {
	while (true) {
		int forward = controller.get_analog(pros::E_CONTROLLER_ANALOG_LEFT_Y);
		int yaw = controller.get_analog(pros::E_CONTROLLER_ANALOG_RIGHT_X);

  chassis.arcade(yaw, forward);
	
  pros::delay(20);
	}
}
